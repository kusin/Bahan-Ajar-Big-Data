# DEKLARASI
library(dplyr) # manipulasi data
# DEKLARASI
library(dplyr) # manipulasi data
library(cluster) # proses klaster k-means
library(factoextra) # visualisasi hasil klaster
library(ggplot2) # visualisasi data
# ALGORITMA
# Masukan data berupa data frame
x <- data.frame(
a = c(1,2,4,5),
b = c(1,1,3,4)
)
# DEKLARASI
library(dplyr) # manipulasi data
library(cluster) # proses klaster k-means
library(factoextra) # visualisasi hasil klaster
library(ggplot2) # visualisasi data
install.packages("factoextra")
# DEKLARASI
library(dplyr) # manipulasi data
library(cluster) # proses klaster k-means
library(factoextra) # visualisasi hasil klaster
# DEKLARASI
library(dplyr) # manipulasi data
library(cluster) # proses klaster k-means
library(factoextra) # visualisasi hasil klaster
library(ggplot2) # visualisasi data
# ALGORITMA
# Masukan data berupa data frame
x <- data.frame(
a = c(1,2,4,5),
b = c(1,1,3,4)
)
View(x)
View(x)
# Melihat dataset
print(x)
# Proses klaster kmeans dengan jumlah k=2
# x <- kmeans(dataset, jumlah label/class)
klasterisasi <- kmeans(x, centers = 2)
# Keluaran hasil perhitungan K-Means
print (klasterisasi)
# Visual Hasil KMeans
fviz_cluster(klasterisasi, data = x)
# ALGORITMA
# Masukan data berupa data frame
x <- iris
View(x)
# Melihat dataset
print(x)
# Proses klaster kmeans dengan jumlah k=2
# x <- kmeans(dataset, jumlah label/class)
klasterisasi <- kmeans(x, centers = 3)
x$Species = NULL
# ALGORITMA
# Masukan data berupa data frame
x <- iris
x$Species = NULL
# Melihat dataset
print(x)
# Proses klaster kmeans dengan jumlah k=2
# x <- kmeans(dataset, jumlah label/class)
klasterisasi <- kmeans(x, centers = 3)
# Keluaran hasil perhitungan K-Means
print (klasterisasi)
# Visual Hasil KMeans
fviz_cluster(klasterisasi, data = x)
# DEKLARASI
library("ggplot2")
library("dplyr")
library("ggfortify")
install.packages("ggfortify")
# ALGORITMA
summary(iris)
head(iris)
# akuisisi data
data <- select(iris, c(1:4))
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
View(wssplot)
function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss
}
View(wssplot)
kmean <- kmeans(data, 2)
kmean$centers
autoplot(kmean, data, frame = TRUE)
kmean$centers
autoplot(kmean, data, frame = TRUE)
autoplot(kmean, data, frame = TRUE)
kmean <- kmeans(data, 3)
kmean$centers
autoplot(kmean, data, frame = TRUE)
library(ggplot2)
data(iris)
head(iris)
irisScale = scale(iris[,-5])
head(irisScale)
ggplot(iris,aes(x = Sepal.Length, y = Sepal.Width, col= Species)) + geom_point()
ggplot(iris,aes(x = Petal.Length, y = Petal.Width, col= Species)) + geom_point()
library(ggplot2)
data(iris)
head(iris)
irisScale = scale(iris[,-5])
head(irisScale)
ggplot(iris,aes(x = Petal.Length, y = Petal.Width, col= Species)) + geom_point()
K.max = 10  #maximum 10 cluster assume
wss = rep(NA, K.max = 10) #Repeat NA for 10 cluster i.e create vector with NA of size 10/1
nClust = list() #Initialize empty list for number of cluster
for(i in 1:K.max){
irisclasses= kmeans(irisScale,i)    #object stored in iris class
wss[i] = irisclasses$tot.withinss   #in irisclass,total wss distance allocated
nClust[[i]] = irisclasses$size      #size allocated to componant of list you have created
}
plot(1:K.max, wss,
type="b",pch = 19,   #b means both(line,point), pch: specify symbol used along with plot
xlab= "Number of clusters",
ylab="between ss/ total ss")
fitK = kmeans(irisScale, 3)
str(fitK)
plot(iris,col = fitK$cluster)
table(Predicted=fitK$cluster,Actual =iris$Species)
